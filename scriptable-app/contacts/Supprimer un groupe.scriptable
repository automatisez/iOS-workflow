{
  "always_run_in_app" : true,
  "icon" : {
    "color" : "light-brown",
    "glyph" : "user-friends"
  },
  "name" : "Supprimer un groupe",
  "script" : "function createAlertDialog(title, message, cancelLabel) {\n  let dialog = new Alert();\n  \n  dialog.title = title;\n  dialog.message = message;\n  \n  dialog.addCancelAction(cancelLabel);\n  \n  return dialog;\n}\n\n\nfunction deleteGroup(group) {\n  ContactsGroup.delete(group);\n  \n  Contact.persistChanges()\n  .then((data) => {\n    console.log(`Group ${ group.name } successfully deleted.`);\n  })\n  .catch((error) => {\n    console.log(`Failed to delete group ${error}`);\n    let alert = createAlertDialog(\"Erreur\", \"Erreur. Verifiez que votre compte par dÃ©fault pour les contacts est bien iCloud.\", \"OK\")\n    alert.present();\n  });\n}\n\n  \nfunction confirmDeleteGroup(group) {\n  let alert = new Alert();\n  \n  alert.title = \"Confirmation\";\n  alert.message = `Vous aller supprimer le groupe de contacts \"${ group.name }\".`;\n  \n  alert.addDestructiveAction(\"Supprimer le groupe\");\n  alert.addCancelAction(\"Annuler\");\n    \n  alert.presentAlert()\n  .then((response) => {\n    if ( -1 != response ) {\n      deleteGroup(group);\n    }\n  });\n\n}\n  \n  \nfunction contactDisplayName(contact) {\n  let name = null;\n  \n  if ( contact.familyName ) {\n    name = contact.familyName;\n    if ( contact.givenName ) {\n      name = name + ' ' + contact.givenName;\n    }\n  }\n  \n  return name;\n}\n  \nasync function createGroupRow(group) {\n  let row = new UITableRow();\n  row.height = 50;\n\n  let members = await Contact.inGroups([group]);\n  \n  let nameCell = UITableCell.text(group.name);\n  nameCell.leftAligned();\n  \n  let countCell = UITableCell.text(`${ members.length } contacts`)\n  countCell.rightAligned();\n  \n  row.addCell(nameCell);\n  row.addCell(countCell);\n\n  row.onSelect = (number) => {\n    confirmDeleteGroup(group);\n  }\n  \n  return row;\n}\n\nasync function createGroupTable(groups) {\n  let table = new UITable();\n  \n  for ( group of groups ) {\n    let row = await createGroupRow(group);\n    table.addRow(row);\n  }\n  \n  return table;\n}\n\nfunction orderGroups(groups) {\n  groups.sort(\n    (g1, g2) => { return g1.name.localeCompare(g2.name); }\n  );\n  \n  return groups;\n}\n\n\nlet container = await ContactsContainer.default();\nlet allGroups = await ContactsGroup.all([container]);\nlet orderedGroups = orderGroups(allGroups);\nlet groupTable = await createGroupTable(orderedGroups);\n\ngroupTable.present();\n",
  "share_sheet_inputs" : [

  ]
}