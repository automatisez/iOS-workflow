{
  "always_run_in_app" : true,
  "icon" : {
    "color" : "light-brown",
    "glyph" : "user-friends"
  },
  "name" : "Gérer un groupe de contacts",
  "script" : "let text = {\n  'group.member.remove': {\n    'fr-FR': \"✅ Enlever\",\n    '*':     \"✅ Remove\"\n  },\n  'group.member.restore': {\n    'fr-FR': \"🔙 Remettre\",\n    '*':     \"🔙 Restore\"\n  },\n  'contact.anonymous': {\n    'fr-FR': \"⁉️ anonyme\",\n    '*':     \"⁉️ anonymous\"\n  },\n\n  'error': {\n    'fr-FR': \"Erreur\",\n    '*':     \"Error\"\n  },\n  'error.msg.remove': {\n    'fr-FR': \"Impossible de retirer du groupe. Vérifiez que votre compte par défault pour les contacts est bien iCloud.\",\n    '*':     \"Failed to remove contact. Please check your default account is iCloud.\"\n  },\n  'error.msg.restore': {\n    'fr-FR': \"Échec de réintégration. Vérifiez que votre compte par défault pour les contacts est bien iCloud.\",\n    '*':     \"Failed to restore contact in group. Please check your default account is iCloud.\"\n  },\n  'ok': {\n    'fr-FR': \"OK\",\n    '*':     \"OK\"\n  },\n\n\n  \/\/ Use this as a template for localization\n  '__': {\n    'fr-FR': \"\",\n    '*':     \"\"\n  }\n};\n\nlet container = await ContactsContainer.default();\n    \nasync function groupSelected(group) {\n  if ( null !== group ) {\n    console.log(`Group: ${group.name}`);\n    let members = await Contact.inGroups([ group ]);\n    let orderedMembers = orderContacts(members);\n    \n    console.log(\n      orderedMembers.map(\n        (c) => { return `${c.familyName} ${c.givenName}`; }\n      )\n    );\n    \n    console.log('manage');\n    manageGroupMembers(container, group, members);\n  }\n};\n    \nawait selectContactGroup(container, groupSelected);\n\n\n\/\/ ----- \n\n\n\n\/\/ ===== UI UTILITIES\n\nObject.prototype.i18n = function (key) {\n  let langs = Device.preferredLanguages();\n  langs.push('*');\n  \n  if ( 'undefined' === typeof this[key] ) {\n    console.log(`Missing key ${key}`);\n    Script.complete();\n  }\n  \n  let msg;\n  while ( 'undefined' === typeof msg && (langs.length > 0) ) {\n    msg = this[key][langs.shift()];\n  }\n  \n  return msg;\n};\n\n\n\/** Create a simple alert dialog.\n *\/\nfunction createAlertDialog(title, message, cancelLabel) {\n  let dialog = new Alert();\n  \n  dialog.title = title;\n  dialog.message = message;\n  \n  dialog.addCancelAction(cancelLabel);\n  \n  return dialog;\n}\n\n\n\/\/ ===== GROUP TABLE UTILITIES\n\n\n\/** Create a simple UITableRow for a group\n *\n * @param group \n *        ContactsGroup object\n * @param selectFn \n *        Function to call when group is selected `(group: ContactsGroup) => { ... }`\n *\/\nasync function createGroupRow(group, selectFn) { \n  let row = new UITableRow();\n  row.height = 50;\n\n  let members = await Contact.inGroups([group]);\n  \n  let nameCell = UITableCell.text(group.name);\n  nameCell.leftAligned();\n  \n  let countCell = UITableCell.text(`${ members.length } contacts`)\n  countCell.rightAligned();\n  \n  row.addCell(nameCell);\n  row.addCell(countCell);\n\n  row.onSelect = selectFn;\n  \n  return row;\n}\n\n\n\/** Build a UITable to present a list of ContactsGroup.\n *\/\nasync function createGroupTable(groups, selectFn) {\n  let table = new UITable();\n  \n  for ( group of groups ) {\n    let row = await createGroupRow(group, selectFn);\n    table.addRow(row);\n  }\n  \n  return table;\n}\n\n\n\/\/ ===== GROUP MEMBER TABLE UTILITIES\n\n\/** Simple class to wrap a contact and manage their group membership.\n *\/\nfunction GroupMember(group, contact) {\n  let member = {\n    group: group,\n    contact: contact,\n    isMember: true\n  };\n  \n  return member;\n}\n\n\n\n\n\n\/\/ ===== CONTACT GROUP UTILITY\n\n\/** Order an array of ContactsGroup by their name.\n *\/\nfunction orderGroups(groups) {\n  groups.sort(\n    (g1, g2) => { return g1.name.localeCompare(g2.name); }\n  );\n  \n  return groups;\n}\n\n\n\/** Order an array of ContactsGroup by their name.\n *\/\nfunction orderContacts(contacts) {\n  contacts.sort(\n    (c1, c2) => { \n      let c1HasName = !c1.familyName.match(\/^\\s*$\/);\n      let c2HasName = !c2.familyName.match(\/^\\s*$\/);\n      \n      let c1HasFirstName = !c1.givenName.match(\/^\\s*$\/);\n      let c2HasFirstName = !c2.givenName.match(\/^\\s*$\/);\n      \n      let left  = ( c1HasName ) ? c1.familyName : ( c1HasFirstName ) ? c1.givenName : c1.organizationName;\n      let right = ( c2HasName ) ? c2.familyName : ( c2HasFirstName ) ? c2.givenName : c2.organizationName;      \n        \n      let compare = left.localeCompare(right);\n      \n      return compare;\n    }\n  );\n  \n  return contacts;\n}\n\n\n\/\/ ===== CONTACT INTERACTION\n\n\n\/** Build and present a list of group to select the one to manage.\n *\/\nasync function selectContactGroup(container, selectedFn) {\n  let allGroups = await ContactsGroup.all([ container ]);\n  \n  let orderedGroups = orderGroups(allGroups);\n  \n  \/\/ We build a small function to map row number to group object\n  \/\/ as this is the kind of parameter expected by the selectedFn parameter.\n  let groupSelectionHandler = (index) => {\n    let group = orderedGroups[index];\n    selectedFn(group);\n  };\n  \n  let groupTable = await createGroupTable(orderedGroups, groupSelectionHandler);\n  \n  groupTable.present();\n}\n\n\n\n\/\/ -----\n\n\n\/** Build and present a list of group members and allow on-the-fly membership management.\n *\/\nasync function manageGroupMembers(container, group, contacts) {\n  let memberList = contacts.map(\n    (contact) => { return GroupMember(group, contact); }\n  );\n  \n  \/\/ Change membership on the fly\n  let selectHandler = (member, complete) => {\n    if ( member.isMember ) {\n      console.log('will remove');\n      removeContactFromGroup(member.contact, group, () => { \n        member.isMember = false; \n        console.log(`did remove ${member}`);\n        complete();\n      });\n    }\n    else {\n      console.log('will add');\n      addContactToGroup(member.contact, group, () => { \n        console.log('did add');\n        member.isMember = true; \n        complete();\n      });\n    }\n  };\n  \n  let table = await createMembersTable(memberList, selectHandler);\n  console.log('present member table')\n  table.present();\n}\n\n\n\/** Build a UITable to present a list of ContactsGroup.\n *\/\nasync function createMembersTable(members, selectFn) {\n  let table = new UITable();\n  table.showSeparators = true;\n  \n  let selectedFn = (rowIndex) => {\n    let member = members[rowIndex];\n    console.log(`@${rowIndex}: `);\n    \n    console.log('Calling handler...');\n    selectFn(member, () => { \n      console.log('Reloading...');\n      refreshMembersTable(table, members, selectedFn);\n    });\n  };\n  \n  await refreshMembersTable(table, members, selectedFn);\n  \n  return table;\n}\n\n\nasync function refreshMembersTable(table, members, selectedFn) {\n  table.removeAllRows();\n  \n  for ( member of members ) {\n    let row = await createMemberRow(member, selectedFn);\n    table.addRow(row);\n  }\n  \n  table.reload();\n}\n\n\n\nasync function createMemberRow(member, selectFn) { \n  let row = new UITableRow();\n  row.height = 64;\n\n  let name = [member.contact.familyName, member.contact.givenName].join(' ');\n  let nameCell = null;\n  \n  if ( name.match(\/^\\s*$\/) ) {\n    if ( member.contact.emailAddresses.length > 0 ) {\n      let email = member.contact.emailAddresses[0];\n      name = [email.localizedLabel, email.value].join(' ');\n    }\n    else if ( member.contact.phoneNumbers.length > 0 ) {\n      let phone = member.contact.phoneNumbers[0];\n      name = [phone.localizedLabel, phone.value].join(' ');\n    }\n    else {\n      name = text.i18n('contact.anonymous');\n    }\n  }\n\n  \n  let corpName = member.contact.organizationName;\n  if ( corpName && corpName.match(\/^\\s*$\/) ) {\n    \/\/ No corp name, text cell has only a title with name\n    nameCell = UITableCell.text(name);\n  } \n  else {\n    \/\/ With corp name, put corp in title, name in subtitle\n    nameCell = UITableCell.text(corpName, name);\n  }\n  nameCell.leftAligned();\n\n  let actionKey = \n    ( member.isMember ) ? \"group.member.remove\" \n                        : \"group.member.restore\";\n  let action = text.i18n(actionKey);\n  let actionCell = UITableCell.text(action);\n  \n  row.addCell(nameCell);\n  row.addCell(actionCell);\n\n  row.onSelect = selectFn;\n  row.dismissOnSelect = false;\n  \n  return row;\n}\n\n\n\n\/** Remove contact from the group and apply change to the store.\n *\/\nfunction removeContactFromGroup(contact, group, complete) {\n  group.removeMember(contact);\n  \n  Contact.persistChanges()\n  .then((data) => {\n    complete();\n    console.log(`Contact ${ contact.familyName } removed from group ${ group.name }.`); \n  })\n  .catch((error) => {\n    console.log(`Failed to remove contact from group. ${error}`);\n    let alert = createAlertDialog(\n      text.i18n('error'),\n      text.i18n('error.msg.remove'),\n      text.i18n('ok')\n      );\n    alert.present();\n  });\n}\n\n\nfunction addContactToGroup(contact, group, complete) {\n  group.addMember(contact)\n  \n  Contact.persistChanges()\n  .then((data) => {\n    complete();\n    console.log(`Contact ${ contact.familyName } added to group ${ group.name }.`); \n  })\n  .catch((error) => {\n    console.log(`Failed to add contact to group. ${error}`);\n    let alert = createAlertDialog(\n      text.i18n('error'),\n      text.i18n('error.msg.restore'),\n      text.i18n('ok')\n      );\n    alert.present();\n  });\n}\n\n",
  "share_sheet_inputs" : [

  ]
}