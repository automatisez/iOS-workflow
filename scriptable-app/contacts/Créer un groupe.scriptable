{
  "always_run_in_app" : true,
  "icon" : {
    "color" : "light-brown",
    "glyph" : "user-friends"
  },
  "name" : "Créer un groupe",
  "script" : "let text = {\n  'error': {\n    'fr-FR': \"Erreur\",\n    '*':     \"Error\"\n  },\n\n  'error.isDefaultICloud': {\n    'fr-FR': `Erreur. Verifiez que votre compte par défault pour les contacts est bien iCloud.`,\n    '*':     `Error. Please check default contact account is iCloud.`\n  },\n  \n  'dialog.newGroup.title': {\n    'fr-FR': 'Nouveau groupe',\n    '*':     ''\n  },\n  'dialog.newGroup.msg': {\n    'fr-FR': 'Donnez un nom au groupe que vous voulez créer avec ce contact.',\n    '*':     ''\n  },\n  'dialog.newGroup.field.label': {\n    'fr-FR': 'Nom de groupe',\n    '*':     ''\n  },\n  'dialog.newGroup.field.default': {\n    'fr-FR': 'mongroupe',\n    '*':     ''\n  },\n  'dialog.newGroup.action.label': {\n    'fr-FR': 'Créer un groupe',\n    '*':     ''\n  },\n    \n  'ok': {\n    'fr-FR': \"OK\",\n    '*':     \"OK\"\n  },\n  'cancel': {\n    'fr-FR': \"Annuler\",\n    '*':     \"Cancel\"\n  },\n\n  \/\/ Use this as a template for localization\n  '__': {\n    'fr-FR': \"\",\n    '*':     \"\"\n  }\n};\n\n\/\/ ===== UI UTILITIES\n\nObject.prototype.i18n = function (key) {\n  let langs = Device.preferredLanguages();\n  langs.push('*');\n  \n  if ( 'undefined' === typeof this[key] ) {\n    console.log(`Missing key ${key}`);\n    Script.complete();\n  }\n  \n  let msg;\n  while ( 'undefined' === typeof msg && (langs.length > 0) ) {\n    msg = this[key][langs.shift()];\n  }\n  \n  return msg;\n};\n\n\nfunction createTextPrompDialog(title, message, fieldLabel, fieldDefault, cancelLabel, actionLabel) {\n  let dialog = new Alert();\n  \n  dialog.title = title;\n  dialog.message = message;\n  \n  dialog.addTextField(fieldLabel, fieldDefault);\n  dialog.addAction(actionLabel);\n  dialog.addCancelAction(cancelLabel);\n  \n  return dialog;\n}\n\nfunction createAlertDialog(title, message, cancelLabel) {\n  let dialog = new Alert();\n  \n  dialog.title = title;\n  dialog.message = message;\n  \n  dialog.addCancelAction(cancelLabel);\n  \n  return dialog;\n}\n\n\n\/\/ =====\n\n    \n\/** Prompt user with an alert asking for new group name.\n *\n * If user's select the cancel option, the null value will be returned.\n * \n * If user confirms, the group name will be returned.\n *\/\nasync function askForGroupName() {\n  let dialog = createTextPrompDialog(\n    text.i18n('dialog.newGroup.title'),\n    text.i18n('dialog.newGroup.msg'),\n    text.i18n('dialog.newGroup.field.label'),\n    text.i18n('dialog.newGroup.field.default'),\n    text.i18n('cancel'),\n    text.i18n('dialog.newGroup.action.label')\n    );\n  \n  let groupName = null; \n  let response = await dialog.present();\n  \n  if ( response >= 0 ) {\n    groupName = dialog.textFieldValue(0);\n  }\n  \n  return groupName;\n};\n\n\n\/** Create a group with single member in the specified container.\n *\/\nfunction createGroup(container, groupName) {\n  let group = new ContactsGroup();\n  group.name = groupName;\n  \n  ContactsGroup.add(group, container.identifier);\n  \n  Contact.persistChanges()\n  .then((data) => {\n    console.log(`Group created successfully: ${ group.name }`);\n  })\n  .catch((error) => {\n    console.log(`Failed to create group ${error}`);\n    \n    let alert = createAlertDialog(\n      text.i18n('error'),\n      text.i18n('error.isDefaultICloud'),\n      text.i18n('ok')\n    );\n    alert.present();\n  });\n\n  return group;\n}\n\n\nlet groupName = await askForGroupName();\n\nif ( null !== groupName ) {\n  let group = createGroup(ContactsContainer.default(), groupName);\n}\n",
  "share_sheet_inputs" : [

  ]
}